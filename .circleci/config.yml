version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8.9
        environment:
          NODE_ENV: "test"
      - image: circleci/postgres:9.6.5-alpine
        name: test-database
      - image: pagarme/yopa:tldr
        name: yopa
    working_directory: ~/tldr
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{checksum "package.json"}}
            - v1-dependencies
      - run: yarn install
      # - run: yarn lint
      - run: node_modules/.bin/sequelize db:migrate --config src/config/database.js --migrations-path src/database/migrations/
      - run: yarn test && yarn codecov
      - save_cache:
          key: v1-dependencies-{{ checksum "package.json" }}
          paths:
            - node_modules

  pre-deploy:
      machine:
          enabled: true
      steps:
        - run:
            name: Prepare to deploy
            command: |
              mkdir -p ~/.local/bin
              export PATH=$PATH:$HOME/.local/bin # put aws in the path
              # install jq
              curl -sSL -o ~/.local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x ~/.local/bin/jq
              # install ecs-deploy (in work version)
              #waiting for pr https://github.com/silinternational/ecs-deploy/pull/129
              curl -sSL -o ~/.local/bin/ecs-deploy https://raw.githubusercontent.com/kakakakakku/ecs-deploy/675e0e064bc20ad81634efdfe41d802fbe3c30e3/ecs-deploy && sudo chmod +x ~/.local/bin/ecs-deploy
  prepare_prd:
    machine:
        enabled: true
    steps:
      - run:
          name: prepare Deploy to fargate
          command: |
            export AWS_ACCESS_KEY_ID=$PRD_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRD_AWS_SECRET_ACCESS_KEY
            export AWS_ACCOUNT=$PRD_AWS_ACCOUNT
            export CLUSTER=$PRD_CLUSTER
  prepare_stg:
    machine:
        enabled: true
    steps:
      - run:
          name: prepare Deploy to fargate
          command: |
            export AWS_ACCESS_KEY_ID=$STG_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STG_AWS_SECRET_ACCESS_KEY
            export AWS_ACCOUNT=$STG_AWS_ACCOUNT
            export CLUSTER=$STG_CLUSTER
  build_images:
      machine:
          enabled: true
      steps:
        - run:
            name: build images and push
            command: |
              docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
              docker build -t build-w:latest ./Dockerfile.worker
              docker build -t build-s:latest ./Dockerfile.server
              #ecr-login
              eval $(aws ecr get-login --region us-east-1 --no-include-email)
              # build and push server
              export IMAGE_S="$AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME_SERVER"
              docker tag build-s:latest $IMAGE_S:$TRAVIS_TAG
              docker push $IMAGE_S:$TRAVIS_TAG
              # build and push worker
              export IMAGE_W="$AWS_ACCOUNT.dkr.ecr.$REGION.amazonaws.com/$REPO_NAME_WORKER"
              docker tag build-w:latest $IMAGE_W:$TRAVIS_TAG
              docker push $IMAGE_W:$TRAVIS_TAG
  deploy_sandbox:
    machine:
        enabled: true
    steps:
      - run:
          name: prepare Deploy to fargate
          command: |
            # deploy in sandbox
            ecs-deploy -c $CLUSTER -r $REGION -n $TASK_SANDBOX_S -i $IMAGE_S:$TRAVIS_TAG --timeout $TIMEOUT
            ecs-deploy -c $CLUSTER -r $REGION -n $TASK_SANDBOX_W -i $IMAGE_W:$TRAVIS_TAG --timeout $TIMEOUT
  deploy_live:
    machine:
        enabled: true
    steps:
      - run:
          name: prepare Deploy to fargate
          command: |
            # deploy in live
            ecs-deploy -c $CLUSTER -r $REGION -n $TASK_LIVE_S -i $IMAGE_S:$TRAVIS_TAG --timeout $TIMEOUT
            ecs-deploy -c $CLUSTER -r $REGION -n $TASK_LIVE_W -i $IMAGE_W:$TRAVIS_TAG --timeout $TIMEOUT

workflows:
  version: 2
  build-and-deploy:
    jobs:
    - build:
        filters:
          tags:
            only: /^v.*/
    - pre-deploy:
        requires:
        - build
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - prepare-stg:
        requires:
        - build
        - pre-deploy
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - prepare-prd:
        requires:
        - build
        - pre-deploy
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - build-images:
        requires:
        - prepare-prd
        - prepare-stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - deploy_sandbox_stg:
        requires:
        - build-images
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - hold:
        type: approval
        requires:
          - deploy_sandbox_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/
    - deploy_live_stg:
        requires:
        - hold
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+).*$/

    - hold_all_stg:
        type: approval
        requires:
          - deploy_sandbox_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - deploy_sandbox:
        requires:
        - hold_all_stg
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - hold:
        type: approval
        requires:
          - deploy_sandbox
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
    - deploy_live:
        requires:
        - hold
        filters:
          branches:
            ignore: /.*/
          tags:
            only: /^v([0-9]+).([0-9]+).([0-9]+)$/
